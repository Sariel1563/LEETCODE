class Solution {
    public String longestPalindrome(String s) {
        if(s.length() < 2)
            return s;
        String ans = "";
        for(int i = 0; i < s.length()-1; i++)
        {
            int odd = expand(s, i, i, -1);
            int even = expand(s, i, i+1, -1);
            if(ans.length() < (2 * odd +1))
                ans = s.substring(i-odd, i+odd+1);
            if(ans.length() < (2 * even +2))
                ans = s.substring(i-even, i+even+2);
        }
        return ans;
    }
    public int expand(String s, int l, int r, int add)
    {
        while(l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r))
        {
            add++;
            l--;
            r++;
        }
        return add;
    } 
    // public String longestPalindrome(String s) {
    //     String ans = "";
    //     ans += s.charAt(0);
    //     for(int i = 0; i < s.length(); i++)
    //     {
    //         for(int j = i+1; j < s.length(); j++)
    //         {
    //             if(rec(s, i, j))
    //             {
    //                 if(ans.length() < s.substring(i, j+1).length())
    //                 {
    //                     ans = s.substring(i, j+1);
    //                 }
    //             }
    //         }
    //     }
    //     return ans;
    // }
    /*public String longestPalindrome(String s) {
        String ans = "";
        for(int i = 0; i < s.length(); i++)
        {
            int j = s.length()-1;
            while(i < j)
            {
                if(rec(s, i, j))
                {
                    if(ans.length() < (j-i+1))
                    {
                        ans = s.substring(i, j+1);
                        break;
                    }
                }
                else
                    j--;
            }
        }
        return ans;
    }
    public boolean rec(String s, int l, int r)
    {
        if(l >= r)
            return true;
        if(s.charAt(l) == s.charAt(r))
            return(rec(s, l+1, r-1));
        return false;
    }*/
    ///////////1 ms short soln///////////////
    /*
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int l = 0, r = 0, longest = 0;
        int[] chars = new int[95];
        int offset = 32;

        while (r < s.length()) {
            int c = s.charAt(r);
            l = Math.max(chars[c - offset], l);
            longest = Math.max(longest, r - l + 1);
            chars[c - offset] = r + 1;
            r++;
        }

        return longest;
    }
}*/
}
